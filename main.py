import atexit
import json
import logging
import logging.config
import re
import time
from datetime import datetime, timedelta
from functools import wraps
from operator import itemgetter
from pprint import pformat
from threading import Thread

import schedule
import telebot
import yaml
from flask import Flask, request

import utils
from config import *
from data_sessions import sessioned_data, SessionManager

manager = SessionManager()

bot = telebot.TeleBot(BOT_TOKEN)
waiting_for_suggest = {}

logger = logging.getLogger('letovo_quotes')
os.makedirs('logs', exist_ok=True)


def setup_logging():
    with open('logging.yaml') as config_file:
        config = yaml.load(config_file, Loader=yaml.SafeLoader)

    logging.config.dictConfig(config)
    queue_handler = logging.getHandlerByName('queue_handler')
    if queue_handler is not None:
        queue_handler.listener.start()
        atexit.register(queue_handler.listener.stop)


setup_logging()


def mod_feature(func):
    @wraps(func)
    def wrapper(message, *args, **kwargs):
        if message.from_user.id not in MOD_LIST:
            bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')
            return
        return func(message, *args, **kwargs)

    return wrapper


def admin_feature(func):
    @wraps(func)
    def wrapper(message, *args, **kwargs):
        if message.chat.id != ADMIN_ID:
            bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')
            return
        return func(message, *args, **kwargs)

    return wrapper


def private_chat(func):
    @wraps(func)
    def wrapper(message, *args, **kwargs):
        if message.chat.id in (DISCUSSION_ID, VOTING_ID):
            return
        return func(message, *args, **kwargs)

    return wrapper


def arg_parse(func):
    @wraps(func)
    def wrapper(message, *args, **kwargs):
        params = message.text[len(func.__name__) + 2:].split('; ')
        return func(message, params, *args, **kwargs)

    return wrapper


@sessioned_data(manager, 'queue.json')
def check_publish(publish_date: str):
    queue = utils.open_json('queue.json')

    if len(queue) >= POST_TIME[publish_date]:
        publish_quote()


def publish_quote():
    queue = utils.open_json('queue.json')

    if not queue:
        bot.send_message(ADMIN_ID, text='–¶–∏—Ç–∞—Ç—ã –≤ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! :(')
        return

    bot.send_message(CHANNEL_ID, text=queue['0'])

    for key in range(len(queue) - 1):
        queue[str(key)] = queue[str(int(key) + 1)]
    queue.pop(str(len(queue) - 1))

    utils.save_json(queue, 'queue.json')


def generate_keyboard(content: dict[str, str]):
    keyboard = telebot.types.InlineKeyboardMarkup()

    for text, callback_data in content.items():
        keyboard.add(telebot.types.InlineKeyboardButton(text=text, callback_data=callback_data))

    return keyboard


@sessioned_data(manager, 'banlist.json')
@sessioned_data(manager, 'pending.json')
def handle_quote(message, quote):
    author = message.from_user
    author_representation = utils.user_representation(author)
    author_id = str(author.id)

    try:
        quote = utils.reformat_quote(quote)
    except ValueError as e:
        match str(e):
            case 'Author is rejected':
                bot.send_message(message.chat.id,
                                 '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∞–≤—Ç–æ—Ä –ø–æ–ø—Ä–æ—Å–∏–ª –Ω–∞—Å –Ω–µ –≤—ã–∫–ª–∞–¥—ã–≤–∞—Ç—å –µ–≥–æ —Ü–∏—Ç–∞—Ç—ã –≤ –∫–∞–Ω–∞–ª :(')
            case 'Hashtag is not in text':
                bot.send_message(message.chat.id, '–¶–∏—Ç–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–µ—à—Ç–µ–≥!')
            case 'Text is too long':
                bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è!')
            case _:
                logger.error(e)
        return

    banlist = utils.open_json('banlist.json')

    if author_id in banlist:
        if int(time.time()) > banlist[author_id]:
            banlist.pop(author_id)
            utils.save_json(banlist, 'banlist.json')
        else:
            logger.info(f'Received message from the banned user {author_representation}: "{quote}"')
            bot.send_message(message.chat.id,
                             f'–¢—ã –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ø–æ—ç—Ç–æ–º—É –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ü–∏—Ç–∞—Ç—ã. –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {utils.format_time(banlist[author_id] - int(time.time()))}')
            return

    pending = utils.open_json('pending.json')

    for sent_quote in pending.values():
        if utils.check_similarity(sent_quote['text'], quote) > 75:
            bot.send_message(message.chat.id,
                             '–ü–æ–¥–æ–±–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ø—Ä–µ–¥–ª–æ–∂–∫—É! –§–ª—É–¥–∏—Ç—å –Ω–µ —Å—Ç–æ–∏—Ç, –æ–∂–∏–¥–∞–π –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ :)')
            return

    bot.send_message(message.chat.id, '–ü—Ä–∏–Ω—è—Ç–æ! –û—Ç–ø—Ä–∞–≤–∏–ª —Ç–≤–æ—é —Ü–∏—Ç–∞—Ç—É –≤ –ø—Ä–µ–¥–ª–æ–∂–∫—É :)')

    if pending:
        call_count = max(map(int, pending)) + 1
    else:
        call_count = 0

    keyboard = generate_keyboard({'‚ûï –ó–∞': f'upvote: {call_count}', '‚ûñ –ü—Ä–æ—Ç–∏–≤': f'downvote: {call_count}',
                                  'üö´ –û—Ç–∫–ª–æ–Ω–∏—Ç—å (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)': f'suggest_reject: {call_count}'})

    sent_quote = bot.send_message(VOTING_ID,
                                  f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {author_representation} –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Å–ª–µ–¥—É—é—â—É—é —Ü–∏—Ç–∞—Ç—É:\n\n{quote}',
                                  reply_markup=keyboard)

    pending.update(
        {call_count: {'text': quote, 'message_id': sent_quote.message_id, 'author': author_representation,
                      'source': [message.chat.id, message.id], 'reputation': {'+': [], '-': []}}})

    utils.save_json(pending, 'pending.json')


def not_voted_stat(target: int) -> (int, str):
    pending = utils.open_json('pending.json')
    result = ''
    quotes_count = 1

    for quote in pending.values():
        if target not in quote['reputation']['+'] + quote['reputation']['-']:
            result += f'{quotes_count}. https://t.me/c/{str(VOTING_ID)[3:]}/{quote['message_id']}\n'
            quotes_count += 1

    return quotes_count - 1, result.strip()


@sessioned_data(manager, 'pending.json')
@sessioned_data(manager, 'rejected.json')
@sessioned_data(manager, 'queue.json')
def quote_verdict():
    pending = utils.open_json('pending.json')

    voted_stat = {}
    for mod_id, mod_nick in MOD_LIST.items():
        not_voted_count, _ = not_voted_stat(mod_id)
        voted_stat[mod_nick] = [not_voted_count]

    logger.debug(pformat(voted_stat))

    accept_quo, reject_quo = 0, 0

    updated_pending = {}

    for key, quote in pending.items():
        quote_text = quote['text']
        message_id = quote['message_id']
        author_id, source_id = quote['source']
        reputation = len(quote['reputation']['+']) - len(quote['reputation']['-'])

        if len(quote['reputation']['+']) + len(quote['reputation']['-']) < MIN_VOTES:
            updated_pending.update({key: quote})
        elif reputation < ACCEPT:
            bot.edit_message_text(
                f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {quote['author']} '
                f'–ø—Ä–µ–¥–ª–æ–∂–∏–ª —Å–ª–µ–¥—É—é—â—É—é —Ü–∏—Ç–∞—Ç—É:\n\n{quote_text}\n\n–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º {reputation}',
                VOTING_ID, message_id, reply_markup=None)
            try:
                bot.send_message(author_id, '–¢–≤–æ—è —Ü–∏—Ç–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ :(',
                                 reply_to_message_id=source_id)
            except telebot.apihelper.ApiTelegramException:
                bot.send_message(author_id, '–¢–≤–æ—è —Ü–∏—Ç–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ :(')

            rejected = utils.open_json('rejected.json')
            if rejected:
                rejected.update({str(max(map(int, rejected)) + 1): [quote_text, reputation]})
            else:
                rejected.update({'0': [quote_text, reputation]})
            utils.save_json(rejected, 'rejected.json')

            reject_quo += 1

            logger.info(f'{reject_quo = }, {pformat(rejected[-1])}')
        else:
            bot.edit_message_text(
                f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {quote['author']} '
                f'–ø—Ä–µ–¥–ª–æ–∂–∏–ª —Å–ª–µ–¥—É—é—â—É—é —Ü–∏—Ç–∞—Ç—É:\n\n{quote_text}\n\n–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º {reputation}',
                VOTING_ID, message_id, reply_markup=None)
            try:
                bot.send_message(author_id, '–¢–≤–æ—è —Ü–∏—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é!',
                                 reply_to_message_id=source_id)
            except telebot.apihelper.ApiTelegramException:
                bot.send_message(author_id, '–¢–≤–æ—è —Ü–∏—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é!')

            queue = utils.open_json('queue.json')
            queue.update({str(len(queue)): quote_text})
            utils.save_json(queue, 'queue.json')

            accept_quo += 1

            logger.info(f'{accept_quo = }, {pformat(queue[-1]) if queue else None}')

    utils.save_json(updated_pending, 'pending.json')

    for mod_id, mod_nick in MOD_LIST.items():
        not_voted_count, not_voted_mod_stat = not_voted_stat(mod_id)
        voted_stat[mod_nick].append(not_voted_count)

        if not_voted_mod_stat:
            bot.send_message(mod_id, '–¢—ã –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Ü–∏—Ç–∞—Ç—ã:\n' + not_voted_mod_stat)

    logger.debug(pformat(voted_stat))

    voted_stat_msg = '<b>–ù–µ–ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã</b>\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: –≤—Å–µ–≥–æ (–æ—Å—Ç–∞–ª–æ—Å—å)\n\n'
    for mod, stat in voted_stat.items():
        voted_stat_msg += f'<code>{mod}</code>: {stat[0]} ({stat[1]})\n'

    bot.send_message(ADMIN_ID, voted_stat_msg, parse_mode='HTML')
    bot.send_message(ADMIN_ID, f'–¶–∏—Ç–∞—Ç –≤ –ø—Ä–µ–¥–ª–æ–∂–∫–µ –¥–æ –≤–µ—Ä–¥–∏–∫—Ç–∞: {len(pending)}\n'
                               f'–¶–∏—Ç–∞—Ç –≤ –ø—Ä–µ–¥–ª–æ–∂–∫–µ –ø–æ—Å–ª–µ –≤–µ—Ä–¥–∏–∫—Ç–∞: {len(updated_pending)}\n'
                               f'–ü—Ä–∏–Ω—è—Ç–æ —Ü–∏—Ç–∞—Ç –∑–∞ –≤–µ—Ä–¥–∏–∫—Ç: {accept_quo}\n'
                               f'–û—Ç–∫–ª–æ–Ω–µ–Ω–æ —Ü–∏—Ç–∞—Ç –∑–∞ –≤–µ—Ä–¥–∏–∫—Ç: {reject_quo}')


@bot.message_handler(commands=['start'])
@private_chat
def start(message):
    waiting_for_suggest[message.from_user.id] = False
    bot.send_message(message.chat.id,
                     '–ü—Ä–∏–≤–µ—Ç! –°—é–¥–∞ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ü–∏—Ç–∞—Ç—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ "–ó–∞–±–∞–≤–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –õ–µ—Ç–æ–≤–æ". –ï—Å–ª–∏ —Ç—ã –≤–¥—Ä—É–≥ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –¥–µ—Ä–∂–∏ —Å—Å—ã–ª–∫—É: '
                     'https://t.me/letovo_quotes. –ù–∏–∫–∞–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π - –ø—Ä–µ–¥–ª–∞–≥–∞–π –≤—Å–µ, —á—Ç–æ –ø–æ–∫–∞–∂–µ—Ç—Å—è —Ç–µ–±–µ —Å–º–µ—à–Ω—ã–º (—Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /suggest), –≥–ª–∞–≤–Ω–æ–µ, —É–∫–∞–∂–∏ –∞–≤—Ç–æ—Ä–∞ —Ü–∏—Ç–∞—Ç—ã :)')
    logging.info(f'{utils.user_representation(message.from_user) = }')


@bot.message_handler(commands=['suggest'])
@private_chat
def suggest(message):
    waiting_for_suggest[message.from_user.id] = False
    quote = message.text.replace('@letovo_suggestion_bot', '')[9:]

    if quote:
        handle_quote(message, quote)
    else:
        bot.send_message(message.chat.id,
                         '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ü–∏—Ç–∞—Ç –≤ –ø—Ä–µ–¥–ª–æ–∂–∫—É. –í—Å–µ, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ '
                         '—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /suggest –∏ –∂–¥–∞—Ç—å –≤–µ—Ä–¥–∏–∫—Ç–∞.')
        waiting_for_suggest[message.from_user.id] = True


@bot.message_handler(commands=['help'])
@private_chat
def help(message):
    waiting_for_suggest[message.from_user.id] = False
    user_help = '<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n/start ‚Äì –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/help ‚Äì –≤—ã–∑–æ–≤ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n' \
                '/suggest ‚Äì –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ü–∏—Ç–∞—Ç—É\n/suggest_rollback ‚Äì –æ—Ç–∫–∞—Ç–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—É—é —Ü–∏—Ç–∞—Ç—É'
    mod_help = '<b>–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n/ban [id]; [reason]; [duration in hours, 1 by default] ‚Äì –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/unban [id]; [reason] - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n' \
               '/get_banlist ‚Äì —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n/get ‚Äì —Ç–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å —Ü–∏—Ç–∞—Ç –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é\n' \
               '/not_voted ‚Äì –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ —Ü–∏—Ç–∞—Ç—ã –≤ –ø—Ä–µ–¥–ª–æ–∂–∫–µ, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –µ—â—ë –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª\n'
    admin_help = '/push [text] ‚Äì –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã –≤ –æ—á–µ—Ä–µ–¥—å\n' \
                 '/edit [id]; [text] ‚Äì –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã —Å –∑–∞–¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º\n/delete [id] ‚Äì —É–¥–∞–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã —Å –∑–∞–¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º\n' \
                 '/swap [id1]; [id2] ‚Äì –ø–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏ –¥–≤–µ —Ü–∏—Ç–∞—Ç—ã\n/insert [id]; [text] ‚Äì –≤—Å—Ç–∞–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏\n' \
                 '/verdict ‚Äì –≤—ã–∑–≤–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–¥–∏–∫—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Ü–∏—Ç–∞—Ç –≤ –ø—Ä–µ–¥–ª–æ–∂–∫–µ\n/reload ‚Äì –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã –∏–∑ –æ–±–ª–∞–∫–∞'

    bot.send_message(message.chat.id, user_help, parse_mode='HTML')

    if message.chat.id == ADMIN_ID:
        bot.send_message(message.chat.id, mod_help + admin_help, parse_mode='HTML')
    elif message.from_user.id in MOD_LIST:
        bot.send_message(message.chat.id, mod_help, parse_mode='HTML')


@bot.message_handler(commands=['suggest_rollback'])
@sessioned_data(manager, 'pending.json')
@private_chat
def suggest_rollback(message):
    waiting_for_suggest[message.from_user.id] = False
    pending = utils.open_json('pending.json')

    for counter, sent_quote in reversed(pending.items()):
        sent_quote_author_id = int(re.search(r'ID: (\d+)', sent_quote['author']).group(1))
        if sent_quote_author_id == message.from_user.id:
            pending.pop(str(counter))
            quote_text = sent_quote['text']
            quote_id = sent_quote['message_id']

            bot.edit_message_text(
                f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {sent_quote['author']} '
                f'–ø—Ä–µ–¥–ª–æ–∂–∏–ª —Å–ª–µ–¥—É—é—â—É—é —Ü–∏—Ç–∞—Ç—É:\n\n{quote_text}\n\n–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–≤—Ç–æ—Ä–æ–º.',
                VOTING_ID, quote_id, reply_markup=None)
            bot.send_message(message.chat.id, '–£—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–ª —Ç–≤–æ—é –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—É—é —Ü–∏—Ç–∞—Ç—É!')

            utils.save_json(pending, 'pending.json')
            return


@bot.message_handler(commands=['verdict'])
@admin_feature
@private_chat
def verdict(_):
    quote_verdict()


@bot.message_handler(commands=['reload'])
@admin_feature
@private_chat
def reload(_):
    utils.reload_files()


@bot.message_handler(commands=['not_voted'])
@arg_parse
@mod_feature
@private_chat
def not_voted(message, args):
    user_id = message.from_user.id
    target = args[0].strip()

    if target == 'all' and user_id in ADMIN_LIST:
        voted_stat = {}
        for mod_id, mod_nick in MOD_LIST.items():
            not_voted_count, _ = not_voted_stat(mod_id)
            voted_stat[mod_nick] = not_voted_count

        voted_stat = dict(sorted(voted_stat.items(), key=itemgetter(1), reverse=True))

        result = '<b>–ù–µ–ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã</b>\n\n'
        for mod_nick, not_voted_quotes in voted_stat.items():
            result += f'<code>{mod_nick}</code>: {not_voted_quotes}\n'

        bot.send_message(message.chat.id, result, parse_mode='HTML')
        return

    if target:
        if not target.isdigit() or int(target) not in MOD_LIST:
            bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!')
            return
        if user_id in ADMIN_LIST:
            user_id = int(target)
        else:
            bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')
            return

    _, result = not_voted_stat(user_id)

    if result:
        bot.send_message(message.chat.id, '–¢—ã –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Ü–∏—Ç–∞—Ç—ã:\n' + result)
    else:
        bot.send_message(message.chat.id, '–¢—ã –∑–∞ –≤—Å—ë –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!')


@bot.message_handler(commands=['ban'])
@sessioned_data(manager, 'banlist.json')
@arg_parse
@mod_feature
@private_chat
def ban(message, args):
    if len(args) == 3:
        user_id, reason, period = args

        if not period.isdigit():
            bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!')
            return
        period = int(period)
    elif len(args) == 2:
        user_id, reason = args
        period = BAN_TIME
    else:
        bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!')
        return

    if not user_id.isdigit():
        bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!')
        return

    banlist = utils.open_json('banlist.json')
    if user_id in banlist:
        bot.send_message(message.chat.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!')
        return

    period *= 3600

    banned_log = bot.send_message(ADMIN_ID,
                                  f'–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä @{message.from_user.username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {utils.format_time(period)} –ø–æ –ø—Ä–∏—á–∏–Ω–µ "{reason}"')
    bot.pin_chat_message(ADMIN_ID, banned_log.message_id)

    banlist.update({user_id: int(time.time()) + period})
    utils.save_json(banlist, 'banlist.json')

    bot.send_message(user_id,
                     f'–¢—ã –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ {reason}. –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {utils.format_time(period)}')
    bot.send_message(message.chat.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!')


@bot.message_handler(commands=['unban'])
@sessioned_data(manager, 'banlist.json')
@arg_parse
@mod_feature
@private_chat
def unban(message, args):
    if len(args) == 2:
        user_id, reason = args
    else:
        bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!')
        return

    banlist = utils.open_json('banlist.json')

    if user_id not in banlist:
        bot.send_message(message.chat.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!')
        return

    banlist.pop(user_id)

    bot.send_message(message.chat.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!')
    banned_log = bot.send_message(ADMIN_ID,
                                  f'–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä @{message.from_user.username} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ –ø—Ä–∏—á–∏–Ω–µ "{reason}"')
    bot.pin_chat_message(ADMIN_ID, banned_log.message_id)

    utils.save_json(banlist, 'banlist.json')


@bot.message_handler(commands=['push'])
@sessioned_data(manager, 'queue.json')
@arg_parse
@admin_feature
@private_chat
def push(_, args):
    quote = '; '.join(args)

    if not quote:
        bot.send_message(ADMIN_ID, '–ü—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!')
        return

    queue = utils.open_json('queue.json')

    queue.update({str(len(queue)): quote})
    bot.send_message(ADMIN_ID, '–£—Å–ø–µ—à–Ω–æ –∑–∞–Ω–µ—Å —Ü–∏—Ç–∞—Ç—É –≤ –æ—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!')

    utils.save_json(queue, 'queue.json')


@bot.message_handler(commands=['get'])
@sessioned_data(manager, 'queue.json')
@mod_feature
@private_chat
def get(message):
    queue = utils.open_json('queue.json')

    if not queue:
        bot.send_message(message.chat.id, '–û—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—É—Å—Ç–∞!')
        return

    for quote_id, quote in queue.items():
        bot.send_message(message.chat.id, f'#{quote_id}\n{quote}')


@bot.message_handler(commands=['get_banlist'])
@sessioned_data(manager, 'banlist.json')
@mod_feature
@private_chat
def get_banlist(message):
    banlist = utils.open_json('banlist.json')

    if not banlist:
        bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç!')
        return

    bot.send_message(message.chat.id, 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –≤—Ä–µ–º—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏')

    for key, value in banlist.items():
        bot.send_message(message.chat.id, key + ': ' + utils.format_time(max(0, int(value - time.time()))))


@bot.message_handler(commands=['delete'])
@sessioned_data(manager, 'queue.json')
@arg_parse
@admin_feature
@private_chat
def delete(_, args):
    quote_id = args[0]

    queue = utils.open_json('queue.json')

    if quote_id not in queue:
        bot.send_message(ADMIN_ID, '–ü—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!')
        return

    for key in range(int(quote_id), len(queue) - 1):
        queue[str(key)] = queue[str(key + 1)]
    queue.pop(str(len(queue) - 1))

    bot.send_message(ADMIN_ID, f'–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª —Ü–∏—Ç–∞—Ç—É —Å –Ω–æ–º–µ—Ä–æ–º {quote_id}!')

    utils.save_json(queue, 'queue.json')


@bot.message_handler(commands=['edit'])
@sessioned_data(manager, 'queue.json')
@sessioned_data(manager, 'pending.json')
@arg_parse
def edit(message, args):
    if message.chat.id == ADMIN_ID:
        if len(args) != 2:
            bot.send_message(ADMIN_ID, '–ü—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!')
            return

        quote_id, new_text = args
        queue = utils.open_json('queue.json')

        if quote_id not in queue:
            bot.send_message(ADMIN_ID, '–ü—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!')
            return

        queue[quote_id] = new_text
        bot.send_message(ADMIN_ID, f'–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª —Ü–∏—Ç–∞—Ç—É –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {quote_id}!')

        utils.save_json(queue, 'queue.json')
    elif message.chat.id == VOTING_ID:
        pending = utils.open_json('pending.json')

        quote = args[0]
        source = message.reply_to_message

        for key, value in pending.items():
            if source.message_id == value['message_id']:
                pending[key]['text'] = quote
                break

        bot.edit_message_text(source.text.splitlines()[0] + '\n\n' + quote, VOTING_ID,
                              source.message_id, reply_markup=source.reply_markup)
        bot.delete_message(VOTING_ID, message.message_id)

        utils.save_json(pending, 'pending.json')
    else:
        bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')


@bot.message_handler(commands=['swap'])
@sessioned_data(manager, 'queue.json')
@arg_parse
@admin_feature
@private_chat
def swap(_, args):
    if len(args) != 2:
        bot.send_message(ADMIN_ID, '–ü—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!')
        return

    src, dest = args
    queue = utils.open_json('queue.json')

    if src not in queue or dest not in queue:
        bot.send_message(ADMIN_ID, '–ü—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!')
        return

    queue[src], queue[dest] = queue[dest], queue[src]
    bot.send_message(ADMIN_ID, '–£—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª —Ü–∏—Ç–∞—Ç—ã –º–µ—Å—Ç–∞–º–∏ –≤ –æ—á–µ—Ä–µ–¥–∏!')

    utils.save_json(queue, 'queue.json')


@bot.message_handler(commands=['insert'])
@sessioned_data(manager, 'queue.json')
@arg_parse
@admin_feature
@private_chat
def insert(_, args):
    if len(args) != 2:
        bot.send_message(ADMIN_ID, '–ü—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!')
        return

    quote_id, quote = args
    queue = utils.open_json('queue.json')

    if quote_id not in queue:
        bot.send_message(ADMIN_ID, '–ü—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!')
        return

    current_quote = queue[quote_id]
    for key in range(int(quote_id) + 1, len(queue) + 1):
        next_quote = queue.get(str(key))
        queue[str(key)] = current_quote
        current_quote = next_quote

    queue[quote_id] = quote
    bot.send_message(ADMIN_ID, '–£—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–∏–ª —Ü–∏—Ç–∞—Ç—É –≤ –æ—á–µ—Ä–µ–¥—å!')

    utils.save_json(queue, 'queue.json')


@bot.message_handler(content_types=['text'])
def text_handler(message):
    author_id = message.from_user.id
    if waiting_for_suggest.get(author_id, False) and message.chat.id != DISCUSSION_ID:
        handle_quote(message, message.text)
        waiting_for_suggest[author_id] = False

    if message.chat.id == DISCUSSION_ID and message.from_user.username == 'Channel_Bot' and message.sender_chat.title != CHANNEL_NAME:
        bot.delete_message(DISCUSSION_ID, message.message_id)
        bot.kick_chat_member(DISCUSSION_ID, message.from_user.id)

    if message.chat.id == DISCUSSION_ID and re.search('@[a-zA-Z0-9_]{5,32}$', message.text.strip()) is not None:
        bot.delete_message(DISCUSSION_ID, message.message_id)
        bot.send_message(ADMIN_ID,
                         f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª –≤ —á–∞—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∏–Ω–≥–æ–º! –ú—ã –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Å–ø–∞–º =(')


@bot.callback_query_handler(func=lambda call: True)
@sessioned_data(manager, 'pending.json')
@sessioned_data(manager, 'rejected.json')
def button_handler(call):
    action = call.data.split(': ')

    if action[0] not in ('upvote', 'downvote', 'reject', 'suggest_reject'):
        return

    lower_bound = datetime.strptime(VERDICT_TIME, '%H:%M')
    upper_bound = lower_bound + timedelta(seconds=20)

    if lower_bound.time() <= datetime.now().time() <= upper_bound.time():
        bot.answer_callback_query(call.id, '–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!')
        return

    pending = utils.open_json('pending.json')

    quote_id = action[1].replace(' ', '')

    if quote_id not in pending:
        bot.reply_to(call.message, '–í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ü–∏—Ç–∞—Ç—ã :( –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –ø—Ä–æ–≤–µ–¥–∏ –µ–µ –≤—Ä—É—á–Ω—É—é.')
        return

    author_id = pending[quote_id]['source'][0]
    source_id = pending[quote_id]['source'][1]
    moderator_id = call.from_user.id
    reputation = pending[quote_id]['reputation']

    match action[0]:
        case 'upvote':
            current_vote, opposite_vote = ('+', '–∑–∞'), ('-', '–ø—Ä–æ—Ç–∏–≤')
        case 'downvote':
            current_vote, opposite_vote = ('-', '–ø—Ä–æ—Ç–∏–≤'), ('+', '–∑–∞')
        case _:
            current_vote, opposite_vote = ('', ''), ('', '')

    if action[0] in ('upvote', 'downvote'):
        if moderator_id in reputation[current_vote[0]]:
            bot.answer_callback_query(call.id, f'–¢—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª "{current_vote[1]}"!')
            return

        if moderator_id in reputation[opposite_vote[0]]:
            pending[quote_id]['reputation'][opposite_vote[0]].remove(call.from_user.id)
            bot.answer_callback_query(call.id,
                                      f'–£—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª —Ç–≤–æ–π –≥–æ–ª–æ—Å —Å "{opposite_vote[1]}" –Ω–∞ "{current_vote[1]}"!')

        bot.answer_callback_query(call.id, f'–°–ø–∞—Å–∏–±–æ –∑–∞ –≥–æ–ª–æ—Å "{current_vote[1]}"!')

        pending[quote_id]['reputation'][current_vote[0]].append(call.from_user.id)

    elif action[0] == 'suggest_reject' and call.from_user.id in ADMIN_LIST:
        keyboard = generate_keyboard(
            {'ü§¨ –¶–µ–Ω–∑—É—Ä–∞': f'reject: {quote_id}: censorship', 'ü§∑ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫': f'reject: {quote_id}: fail',
             'üìú –î—É–±–ª–∏–∫–∞—Ç': f'reject: {quote_id}: duplicate', 'üí¨ –§–ª—É–¥': f'reject: {quote_id}: flood',
             'üë§ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞–≤—Ç–æ—Ä–∞': f'reject: {quote_id}: unknown_author', 'üö´ –û—Ç–º–µ–Ω–∞': f'reject: {quote_id}: cancel'})

        bot.edit_message_text(call.message.text, VOTING_ID, call.message.id, reply_markup=keyboard)

    elif action[0] == 'reject' and call.from_user.id in ADMIN_LIST:
        reason = action[2]
        match reason:
            case 'censorship':
                reason = '—Ç–æ–≥–æ, —á—Ç–æ –Ω–µ –ø—Ä–æ—à–ª–∞ —Ü–µ–Ω–∑—É—Ä—É .-.'
            case 'fail':
                reason = '—Ç–æ–≥–æ, —á—Ç–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫; –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è ‚Äì –±—ã—Ç—å –º–æ–∂–µ—Ç, —Ç–≤–æ—è —Ü–∏—Ç–∞—Ç–∞ —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏!'
            case 'duplicate':
                reason = '—Ç–æ–≥–æ, —á—Ç–æ —Ç–∞–∫–∞—è —Ü–∏—Ç–∞—Ç–∞ —É–∂–µ –µ—Å—Ç—å –≤ –æ—á–µ—Ä–µ–¥–∏ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∫–µ ;D'
            case 'flood':
                reason = '—Ç–æ–≥–æ, —á—Ç–æ –æ–Ω–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–∏—Ç–∞—Ç–æ–π :('
            case 'unknown_author':
                reason = '—Ç–æ–≥–æ, —á—Ç–æ –∞–≤—Ç–æ—Ä —Ü–∏—Ç–∞—Ç—ã –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω :('
            case 'cancel':
                keyboard = generate_keyboard({'‚ûï –ó–∞': f'upvote: {quote_id}', '‚ûñ –ü—Ä–æ—Ç–∏–≤': f'downvote: {quote_id}',
                                              'üö´ –û—Ç–∫–ª–æ–Ω–∏—Ç—å (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)': f'suggest_reject: {quote_id}'})

                bot.edit_message_text(call.message.text, VOTING_ID, call.message.id, reply_markup=keyboard)
                return
            case _:
                return

        rejected = utils.open_json('rejected.json')

        bot.edit_message_text(
            f'{call.message.text}\n\n–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º @{call.from_user.username} –ø–æ –ø—Ä–∏—á–∏–Ω–µ {reason}', VOTING_ID,
            call.message.id, reply_markup=None)
        try:
            bot.send_message(author_id, f'–¢–≤–æ—è —Ü–∏—Ç–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–µ {reason}',
                             reply_to_message_id=source_id)
        except telebot.apihelper.ApiTelegramException:
            bot.send_message(author_id, f'–¢–≤–æ—è —Ü–∏—Ç–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–µ {reason}')

        if rejected:
            rejected.update({str(max(map(int, rejected)) + 1): call.message.text})
        else:
            rejected.update({'0': call.message.text})

        utils.save_json(rejected, 'rejected.json')

        pending.pop(quote_id)

    utils.save_json(pending, 'pending.json')

    bot.answer_callback_query(call.id)


if __name__ == '__main__':
    if SERVER:
        server = Flask(__name__)


        @server.route('/')
        def ping():
            return 'Go to <a href="/launch">/launch</a> to set webhook', 200


        @server.route('/updates', methods=['POST'])
        def get_messages():
            raw_update = request.stream.read().decode('utf-8')
            logger.debug(pformat(json.loads(raw_update)))
            bot.process_new_updates([telebot.types.Update.de_json(raw_update)])
            return '!', 200


        @server.route('/launch')
        def webhook():
            bot.remove_webhook()
            time.sleep(0.1)
            bot.set_webhook(url=WEBHOOK_URL, max_connections=1)
            return 'Webhook set!', 200


        webhook()
        Thread(target=server.run, args=(SERVER_IP, SERVER_PORT)).start()
    else:
        bot.remove_webhook()
        Thread(target=bot.infinity_polling, kwargs={'timeout': 60, 'long_polling_timeout': 60}).start()

    for date in POST_TIME:
        schedule.every().day.at(date).do(check_publish, publish_date=date)

    schedule.every().day.at(VERDICT_TIME).do(quote_verdict)

    while True:
        schedule.run_pending()
        time.sleep(1)
