import os
import time
from threading import Thread
import schedule
import telebot
from flask import Flask, request
import backend

TOKEN = os.getenv('BOT_TOKEN')
POST_TIME = os.getenv('POST_TIME').split()

CHANNEL_ID = '@letovo_quotes'
MOD_ID = -1001791070494
VOTING_ID = -1001645253084
ADMIN_LIST = {1920379812: '@kglebaa', 1095891795: '@dr_platon', 1273466303: '@boris_ber', 1308606295: '@KSPalpatine'}
MOD_LIST = {1224945213: '@DomineSalvaNos', 566239378: '@IvanFenster', 1050307229: '@GonSerg', 1711739283: '@Dr_Vortep',
            1546943628: '@andrushkazbr'}
MOD_LIST.update(ADMIN_LIST)

BAN_TIME = 3600
ACCEPT = 3
MIN_VOTES = 7

bot = telebot.TeleBot(TOKEN)
waiting_for_suggest = {}
voting_notif_ids = []

backend.load_json('queue.json')
backend.load_json('banlist.json')
backend.load_json('pending.json')
backend.load_json('rejected.json')


def format_time(raw):
    return time.strftime('%H:%M:%S', time.gmtime(raw))


def publish_quote():
    queue = backend.open_json('queue.json')

    if not queue:
        bot.send_message(MOD_ID, text='–¶–∏—Ç–∞—Ç—ã –≤ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! :(')
        return

    bot.send_message(CHANNEL_ID, text=queue['0'])

    for key in range(len(queue) - 1):
        queue[str(key)] = queue[str(int(key) + 1)]
    queue.pop(str(len(queue) - 1))

    backend.save_json(queue, 'queue.json')


def handle_quote(message, quote):
    author = message.from_user
    author_name = author.username
    author_id = str(author.id)

    if author_name is None:
        author_name = author.first_name + ' ' + author.last_name

    if quote.find('#') == -1:
        bot.send_message(message.chat.id, '–¶–∏—Ç–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–µ—à—Ç–µ–≥!')
        return

    if len(quote) > 500:
        bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è!')
        return

    pending = backend.open_json('pending.json')

    for sent_quote in pending.values():
        if backend.check_similarity(sent_quote['text'], quote) > 75:
            bot.send_message(message.chat.id,
                             '–ü–æ–¥–æ–±–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ø—Ä–µ–¥–ª–æ–∂–∫—É! –§–ª—É–¥–∏—Ç—å –Ω–µ —Å—Ç–æ–∏—Ç, –æ–∂–∏–¥–∞–π –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ :)')
            return

    banlist = backend.open_json('banlist.json')

    if author_id in banlist and int(time.time()) > banlist[author_id]:
        banlist.pop(author_id)
        backend.save_json(banlist, 'banlist.json')

    if author_id not in banlist:
        bot.send_message(message.chat.id, '–ü—Ä–∏–Ω—è—Ç–æ! –û—Ç–ø—Ä–∞–≤–∏–ª —Ç–≤–æ—é —Ü–∏—Ç–∞—Ç—É –≤ –ø—Ä–µ–¥–ª–æ–∂–∫—É :)')

        if pending:
            call_count = max(map(int, pending)) + 1
        else:
            call_count = 0

        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(telebot.types.InlineKeyboardButton(text='‚ûï –ó–∞', callback_data=f'upvote: {call_count}'))
        keyboard.add(telebot.types.InlineKeyboardButton(text='‚ûñ –ü—Ä–æ—Ç–∏–≤', callback_data=f'downvote: {call_count}'))
        keyboard.add(telebot.types.InlineKeyboardButton(text='‚ùî –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å', callback_data=f'swap: {call_count}'))
        keyboard.add(telebot.types.InlineKeyboardButton(text='üö´ –û—Ç–∫–ª–æ–Ω–∏—Ç—å (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)',
                                                        callback_data=f'reject: {call_count}'))

        sent_quote = bot.send_message(VOTING_ID,
                                      f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{author_name} [ID: {author_id}] –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Å–ª–µ–¥—É—é—â—É—é —Ü–∏—Ç–∞—Ç—É:\n\n{quote}',
                                      reply_markup=keyboard)

        pending.update(
            {call_count: {'text': quote, 'message_id': sent_quote.message_id, 'author': [author_id, author_name],
                          'source': [message.chat.id, message.id], 'reputation': {'+': [], '-': []}}})

        backend.save_json(pending, 'pending.json')
    else:
        bot.send_message(message.chat.id,
                         f'–¢—ã –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ø–æ—ç—Ç–æ–º—É –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ü–∏—Ç–∞—Ç—ã. –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {format_time(banlist[author_id] - int(time.time()))}')
        return


def quote_verdict():
    pending = backend.open_json('pending.json')
    rejected = backend.open_json('rejected.json')

    for notif_id in voting_notif_ids:
        try:
            bot.delete_message(VOTING_ID, notif_id)
        except telebot.apihelper.ApiTelegramException:
            print(f'–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {notif_id}')

    voting_notif_ids.clear()
    updated_pending = {}

    for key, quote in pending.items():
        quote_text = quote['text']
        message_id = quote['message_id']
        author_id = quote['source'][0]
        source_id = quote['source'][1]
        reputation = len(quote['reputation']['+']) - len(quote['reputation']['-'])

        if len(quote['reputation']['+']) + len(quote['reputation']['-']) < MIN_VOTES:
            updated_pending.update({key: quote})

            not_voted = set(MOD_LIST) - set(quote['reputation']['+'] + quote['reputation']['-'])
            if not_voted:
                sent_notif = bot.send_message(VOTING_ID, '–¶–∏—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–±—Ä–∞–ª–∞ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ–ª–æ—Å–æ–≤. '
                                              + ' '.join(MOD_LIST[mod] for mod in not_voted)
                                              + ', –ø—Ä–æ–≥–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ –Ω–µ–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!',
                                              disable_notification=True, reply_to_message_id=message_id)
                voting_notif_ids.append(sent_notif.message_id)

            continue

        if reputation < ACCEPT:
            bot.edit_message_text(
                f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{quote["author"][1]} [ID: {quote["author"][0]}] '
                f'–ø—Ä–µ–¥–ª–æ–∂–∏–ª —Å–ª–µ–¥—É—é—â—É—é —Ü–∏—Ç–∞—Ç—É:\n\n{quote_text}\n\n–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º {reputation}',
                VOTING_ID, message_id, reply_markup=None)
            bot.send_message(author_id, '–¢–≤–æ—è —Ü–∏—Ç–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ :(', reply_to_message_id=source_id)

            if rejected:
                rejected.update({str(max(map(int, rejected)) + 1): [quote_text, reputation]})
            else:
                rejected.update({'0': [quote_text, reputation]})

            continue

        queue = backend.open_json('queue.json')
        next_quote_id = len(queue)
        queue.update({str(next_quote_id): quote_text})

        bot.edit_message_text(
            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{quote["author"][1]} [ID: {quote["author"][0]}] '
            f'–ø—Ä–µ–¥–ª–æ–∂–∏–ª —Å–ª–µ–¥—É—é—â—É—é —Ü–∏—Ç–∞—Ç—É:\n\n{quote_text}\n\n–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º {reputation}',
            VOTING_ID, message_id, reply_markup=None)
        bot.send_message(author_id, '–¢–≤–æ—è —Ü–∏—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é!', reply_to_message_id=source_id)

        backend.save_json(queue, 'queue.json')

    backend.save_json(updated_pending, 'pending.json')
    backend.save_json(rejected, 'rejected.json')


@bot.message_handler(commands=['start'])
def greetings(message):
    bot.send_message(message.chat.id,
                     '–ü—Ä–∏–≤–µ—Ç! –°—é–¥–∞ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ü–∏—Ç–∞—Ç—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ "–ó–∞–±–∞–≤–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –õ–µ—Ç–æ–≤–æ". –ï—Å–ª–∏ —Ç—ã –≤–¥—Ä—É–≥ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –¥–µ—Ä–∂–∏ —Å—Å—ã–ª–∫—É: '
                     'https://t.me/letovo_quotes. –ù–∏–∫–∞–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π - –ø—Ä–µ–¥–ª–∞–≥–∞–π –≤—Å–µ, —á—Ç–æ –ø–æ–∫–∞–∂–µ—Ç—Å—è —Ç–µ–±–µ —Å–º–µ—à–Ω—ã–º (—Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /suggest), –≥–ª–∞–≤–Ω–æ–µ, —É–∫–∞–∂–∏ –∞–≤—Ç–æ—Ä–∞ —Ü–∏—Ç–∞—Ç—ã :)')
    print(message.from_user.id)


@bot.message_handler(commands=['suggest'])
def suggest(message):
    quote = backend.reformat_quote(message.text[9:])

    if quote:
        handle_quote(message, quote)
    else:
        bot.send_message(message.chat.id,
                         '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ü–∏—Ç–∞—Ç –≤ –ø—Ä–µ–¥–ª–æ–∂–∫—É. –í—Å–µ, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å - –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /suggest –∏ –∂–¥–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. '
                         '–ò, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –ø–∏—à–∏ –µ—Ä—É–Ω–¥—É!')
        waiting_for_suggest[message.from_user.id] = True


@bot.message_handler(commands=['help'])
def bot_help(message):
    user_help = '<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n/start ‚Äì –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/help ‚Äì –≤—ã–∑–æ–≤ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n' \
                '/suggest ‚Äì –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ü–∏—Ç–∞—Ç—É\n/suggest_rollback ‚Äì –æ—Ç–∫–∞—Ç–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—É—é —Ü–∏—Ç–∞—Ç—É'
    admin_help = '<b>–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n/ban [id]; [reason]; [duration in sec, 3600 by default] ‚Äì –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/unban [id]; [reason] - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n' \
                 '/get_banlist ‚Äì —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n/get ‚Äì —Ç–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å —Ü–∏—Ç–∞—Ç –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é\n' \
                 '/push [text] ‚Äì –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã –≤ –æ—á–µ—Ä–µ–¥—å\n/clear ‚Äì –æ—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é\n' \
                 '/edit [id]; [text] ‚Äì –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã —Å –∑–∞–¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º\n/delete [id] ‚Äì —É–¥–∞–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã —Å –∑–∞–¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º\n' \
                 '/swap [id1]; [id2] - –ø–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏ –¥–≤–µ —Ü–∏—Ç–∞—Ç—ã\n/insert [id] - –≤—Å—Ç–∞–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏'

    bot.send_message(message.chat.id, user_help, parse_mode='HTML')
    if message.chat.id in (MOD_ID, VOTING_ID):
        bot.send_message(message.chat.id, admin_help, parse_mode='HTML')


@bot.message_handler(commands=['suggest_rollback'])
def suggest_rollback(message):
    pending = backend.open_json('pending.json')

    for counter, sent_quote in reversed(pending.items()):
        if sent_quote['author'][0] == str(message.from_user.id):
            pending.pop(str(counter))
            quote_text = sent_quote['text']
            quote_id = sent_quote['message_id']

            bot.edit_message_text(
                f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{sent_quote["author"][1]} [ID: {sent_quote["author"][0]}] '
                f'–ø—Ä–µ–¥–ª–æ–∂–∏–ª —Å–ª–µ–¥—É—é—â—É—é —Ü–∏—Ç–∞—Ç—É:\n\n{quote_text}\n\n–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–≤—Ç–æ—Ä–æ–º.',
                VOTING_ID, quote_id, reply_markup=None)
            bot.send_message(message.chat.id, '–£—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–ª —Ç–≤–æ—é –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—É—é —Ü–∏—Ç–∞—Ç—É!')

            backend.save_json(pending, 'pending.json')

            return


@bot.message_handler(commands=['ban'])
def ban(message):
    if message.from_user.id in MOD_LIST:
        args = message.text[5:].split('; ')

        if len(args) == 3:
            user_id, reason, period = args[0], args[1], args[2]

            if not period.isdigit():
                bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏!')
                return
        elif len(args) == 2:
            user_id, reason = args[0], args[1]
            period = BAN_TIME
        else:
            bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!')
            return

        if not user_id.isdigit():
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞!')
            return

        banned_log = bot.send_message(MOD_ID,
                                      f'–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä @{message.from_user.username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ –ø—Ä–∏—á–∏–Ω–µ "{reason}"')
        bot.pin_chat_message(MOD_ID, banned_log.message_id)

        banlist = backend.open_json('banlist.json')
        banlist.update({user_id: int(time.time()) + int(period)})
        backend.save_json(banlist, 'banlist.json')

        bot.send_message(user_id, f'–¢—ã –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ {reason}. –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {format_time(int(period))}')
        bot.send_message(message.chat.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!')
    else:
        bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')


@bot.message_handler(commands=['unban'])
def unban(message):
    if message.from_user.id in MOD_LIST:
        args = message.text[7:].split('; ')

        if len(args) >= 2:
            user_id, reason = args
            if not user_id.isdigit():
                bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!')
                return
        else:
            bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!')
            return

        banlist = backend.open_json('banlist.json')

        if user_id not in banlist:
            bot.send_message(message.chat.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!')
            return

        banlist.pop(user_id)

        bot.send_message(message.chat.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!')
        banned_log = bot.send_message(MOD_ID,
                                      f'–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä @{message.from_user.username} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ –ø—Ä–∏—á–∏–Ω–µ "{reason}"')
        bot.pin_chat_message(MOD_ID, banned_log.message_id)

        backend.save_json(banlist, 'banlist.json')
    else:
        bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')


@bot.message_handler(commands=['push'])
def add_queue(message):
    if message.chat.id == MOD_ID:
        quote = message.text[6:]

        if quote:
            queue = backend.open_json('queue.json')

            queue.update({str(len(queue)): quote})

            bot.send_message(MOD_ID, '–£—Å–ø–µ—à–Ω–æ –∑–∞–Ω–µ—Å —Ü–∏—Ç–∞—Ç—É –≤ –æ—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!')

            backend.save_json(queue, 'queue.json')
        else:
            bot.send_message(MOD_ID, '–ü—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!')
            return
    else:
        bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')


@bot.message_handler(commands=['get'])
def get_queue(message):
    if message.from_user.id in MOD_LIST:
        queue = backend.open_json('queue.json')

        if not queue:
            bot.send_message(message.chat.id, '–û—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—É—Å—Ç–∞!')
            return

        for quote_id, quote in queue.items():
            bot.send_message(message.chat.id, f'#{quote_id}\n{quote}')
    else:
        bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')


@bot.message_handler(commands=['get_banlist'])
def get_banlist(message):
    if message.from_user.id in MOD_LIST:
        banlist = backend.open_json('banlist.json')

        if not banlist:
            bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç!')
            return

        bot.send_message(message.chat.id, 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –≤—Ä–µ–º—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏')

        for key, value in banlist.items():
            bot.send_message(message.chat.id, key + ': ' + format_time(int(value)))
    else:
        bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')


@bot.message_handler(commands=['delete'])
def del_quote(message):
    if message.chat.id == MOD_ID:
        quote_id = message.text[8:]

        queue = backend.open_json('queue.json')

        if quote_id not in queue:
            bot.send_message(message.chat.id, '–¶–∏—Ç–∞—Ç—ã —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
            return

        for key in range(int(quote_id), len(queue) - 1):
            queue[str(key)] = queue[str(key + 1)]
        queue.pop(str(len(queue) - 1))

        bot.send_message(MOD_ID, f'–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª —Ü–∏—Ç–∞—Ç—É —Å –Ω–æ–º–µ—Ä–æ–º {quote_id}!')

        backend.save_json(queue, 'queue.json')
    else:
        bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')


@bot.message_handler(commands=['clear_queue'])
def clear_queue(message):
    if message.chat.id == MOD_ID:
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(telebot.types.InlineKeyboardButton(text='‚ûï –î–∞', callback_data='clear: yes'))
        keyboard.add(telebot.types.InlineKeyboardButton(text='‚ûñ –ù–µ—Ç', callback_data='clear: no'))

        bot.send_message(MOD_ID, '–¢—ã —É–≤–µ—Ä–µ–Ω –≤ —Ç–æ–º, —á—Ç–æ —Ö–æ—á–µ—à—å –æ—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π?', reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')


@bot.message_handler(commands=['edit'])
def edit_quote(message):
    if message.chat.id == MOD_ID:
        args = message.text[6:].split('; ')

        if len(args) == 2:
            quote_id, new_text = args
            queue = backend.open_json('queue.json')

            if quote_id in queue.keys():
                queue[quote_id] = new_text
            else:
                bot.send_message(MOD_ID, '–¶–∏—Ç–∞—Ç—ã —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
                return

            bot.send_message(MOD_ID, f'–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª —Ü–∏—Ç–∞—Ç—É –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {quote_id}!')

            backend.save_json(queue, 'queue.json')
        else:
            bot.send_message(MOD_ID, '–ü—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!')
            return
    elif message.chat.id == VOTING_ID:
        pending = backend.open_json('pending.json')

        quote = backend.reformat_quote(message.text[6:])
        source = message.reply_to_message.text.split('\n')

        for key, value in pending.items():
            if message.reply_to_message.text[len(source[0]) + 1:].strip() == value['text'].strip():
                pending[key]['text'] = quote
                break

        bot.edit_message_text(source[0] + '\n\n' + quote, VOTING_ID,
                              message.reply_to_message.message_id, reply_markup=message.reply_to_message.reply_markup)
        bot.delete_message(VOTING_ID, message.message_id)

        backend.save_json(pending, 'pending.json')
    else:
        bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')


@bot.message_handler(commands=['swap'])
def swap_queue(message):
    if message.chat.id == MOD_ID:
        args = message.text[6:].split('; ')

        if len(args) == 2:
            queue = backend.open_json('queue.json')

            if args[0] in queue and args[1] in queue:
                queue[args[0]], queue[args[1]] = queue[args[1]], queue[args[0]]

                bot.send_message(MOD_ID, '–£—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª —Ü–∏—Ç–∞—Ç—ã –º–µ—Å—Ç–∞–º–∏ –≤ –æ—á–µ—Ä–µ–¥–∏!')
            else:
                bot.send_message(MOD_ID, '–¶–∏—Ç–∞—Ç—ã —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
                return

            backend.save_json(queue, 'queue.json')
        else:
            bot.send_message(MOD_ID, '–ü—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!')
            return
    else:
        bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')


@bot.message_handler(commands=['insert'])
def insert_quote(message):
    if message.chat.id == MOD_ID:
        args = message.text[8:].split('; ')

        if len(args) == 2:
            queue = backend.open_json('queue.json')

            if args[0] in queue:
                current_quote = queue[args[0]]
                for key in range(int(args[0]) + 1, len(queue) + 1):
                    next_quote = queue.get(str(key))
                    queue[str(key)] = current_quote
                    current_quote = next_quote

                queue[args[0]] = args[1]

                bot.send_message(MOD_ID, '–£—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–∏–ª —Ü–∏—Ç–∞—Ç—É –≤ –æ—á–µ—Ä–µ–¥—å!')
            else:
                bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!')

            backend.save_json(queue, 'queue.json')
        else:
            bot.send_message(MOD_ID, '–ü—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!')
            return
    else:
        bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')


@bot.message_handler(content_types=['text'])
def text_handler(message):
    author_id = message.from_user.id
    if waiting_for_suggest.get(author_id, False):
        handle_quote(message, message.text)
        waiting_for_suggest[author_id] = False

    if message.chat.id == -1001742201177 and message.from_user.username == 'Channel_Bot' and message.sender_chat.title != '–ó–∞–±–∞–≤–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –õ–µ—Ç–æ–≤–æ':
        bot.delete_message(message.chat.id, message.message_id)
        bot.kick_chat_member(message.chat.id, message.from_user.id)


@bot.callback_query_handler(func=lambda call: True)
def button_handler(call):
    action = call.data.split(':')

    if action[0] in ['upvote', 'downvote', 'swap', 'reject']:
        pending = backend.open_json('pending.json')

        actual_quote_id = action[1].replace(' ', '')

        if actual_quote_id not in pending:
            bot.reply_to(call.message,
                         '–í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ü–∏—Ç–∞—Ç—ã :( –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –ø—Ä–æ–≤–µ–¥–∏ –µ–µ –≤—Ä—É—á–Ω—É—é.')
            return

        author_id = pending[actual_quote_id]['source'][0]
        source_id = pending[actual_quote_id]['source'][1]
        reputation = pending[actual_quote_id]['reputation']

        if action[0] == 'upvote' or action[0] == 'downvote':
            if call.from_user.id not in reputation['+'] and call.from_user.id not in reputation['-']:
                if action[0] == 'upvote':
                    pending[actual_quote_id]['reputation']['+'].append(call.from_user.id)
                else:
                    pending[actual_quote_id]['reputation']['-'].append(call.from_user.id)
                bot.answer_callback_query(call.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≥–æ–ª–æ—Å!')
            else:
                bot.answer_callback_query(call.id,
                                          f'–¢—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª {"–∑–∞" if call.from_user.id in reputation["+"] else "–ø—Ä–æ—Ç–∏–≤"}!')
        elif action[0] == 'swap':
            if call.from_user.id in reputation['+']:
                pending[actual_quote_id]['reputation']['+'].remove(call.from_user.id)
                pending[actual_quote_id]['reputation']['-'].append(call.from_user.id)
                bot.answer_callback_query(call.id, '–£—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª —Ç–≤–æ–π –≥–æ–ª–æ—Å —Å "–∑–∞" –Ω–∞ "–ø—Ä–æ—Ç–∏–≤"!')
            elif call.from_user.id in reputation['-']:
                pending[actual_quote_id]['reputation']['-'].remove(call.from_user.id)
                pending[actual_quote_id]['reputation']['+'].append(call.from_user.id)
                bot.answer_callback_query(call.id, '–£—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª —Ç–≤–æ–π –≥–æ–ª–æ—Å —Å "–ø—Ä–æ—Ç–∏–≤" –Ω–∞ "–∑–∞"!')
            else:
                bot.answer_callback_query(call.id, '–¢—ã –µ—â–µ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª!')
        elif action[0] == 'reject' and call.from_user.id in ADMIN_LIST:
            rejected = backend.open_json('rejected.json')

            bot.edit_message_text(f'{call.message.text}\n\n–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º @{call.from_user.username}', VOTING_ID,
                                  call.message.id, reply_markup=None)
            bot.send_message(author_id, '–¢–≤–æ—è —Ü–∏—Ç–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ :(', reply_to_message_id=source_id)

            if rejected:
                rejected.update({str(max(map(int, rejected)) + 1): call.message.text})
            else:
                rejected.update({'0': call.message.text})

            backend.save_json(rejected, 'rejected.json')

            pending.pop(actual_quote_id)

        backend.save_json(pending, 'pending.json')

    elif call.data == 'clear: yes':
        backend.save_json({}, 'queue.json')
        bot.edit_message_text('–£—Å–ø–µ—à–Ω–æ –æ—á–∏—Å—Ç–∏–ª –æ—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π!', MOD_ID, call.message.id, reply_markup=None)
    elif call.data == 'clear: no':
        bot.edit_message_text('–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—á–∏—Å—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –æ—Ç–∫–ª–æ–Ω–µ–Ω.', MOD_ID, call.message.id,
                              reply_markup=None)

    bot.answer_callback_query(call.id)


if __name__ == '__main__':
    if 'SERVER' in os.environ:
        server = Flask('__main__')


        @server.route('/updates', methods=['POST'])
        def get_messages():
            bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode('utf-8'))])
            return '!', 200


        @server.route('/')
        def webhook():
            bot.remove_webhook()
            bot.set_webhook(url='https://letovo-quotes-iqn5a.ondigitalocean.app/updates', max_connections=1)
            return '?', 200


        Thread(target=server.run, args=('0.0.0.0', os.environ.get('PORT', 80))).start()
    else:
        bot.remove_webhook()
        Thread(target=bot.polling, args=()).start()

for data in POST_TIME:
    schedule.every().day.at(data).do(publish_quote)

schedule.every().day.at('18:00').do(quote_verdict)

while True:
    schedule.run_pending()
    time.sleep(1)
